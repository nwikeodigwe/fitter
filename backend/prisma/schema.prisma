// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String            @id @default(cuid())
  name                String?           @unique
  email               String            @unique
  password            String
  social              String?
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  profile             Profile?
  resets              Reset[]
  comments            Comment[]
  authoredStyles      Style[]           @relation("UserAuthoredStyles")
  brand               Brand[]
  likedStyles         LikedStyle[]
  likedComments       LikedComment[]
  likedItems          LikedItem[]
  likedCollections    LikedCollection[]
  authoredCollections Collection[]      @relation("UserAuthoredCollection")
  Item                Item[]
}

model Profile {
  id        String   @id @default(cuid())
  firstname String?
  lastname  String?
  bio       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
}

model Reset {
  id        String   @id @default(cuid())
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model Tag {
  id          String       @id @default(cuid())
  name        String       @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  brands      Brand[]      @relation("BrandTags")
  collections Collection[] @relation("CollectionTags")
  styles      Style[]      @relation("StyleTags")
  items       Item[]       @relation("ItemTags")
  comments    Comment[]    @relation("CommentTags")
}

model Brand {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  logo        Logo?    @relation(fields: [logoId], references: [id])
  logoId      String?  @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  items       Item[]
  owner       User?    @relation(fields: [ownerId], references: [id])
  ownerId     String?
  tags        Tag[]    @relation("BrandTags")
}

model Collection {
  id          String            @id @default(cuid())
  name        String
  description String?
  author      User?             @relation("UserAuthoredCollection", fields: [authorId], references: [id])
  authorId    String?
  styles      Style[]
  likedBy     LikedCollection[]
  tags        Tag[]             @relation("CollectionTags")
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model Style {
  id           String       @id @default(cuid())
  name         String
  description  String
  published    Boolean      @default(false)
  author       User?        @relation("UserAuthoredStyles", fields: [authorId], references: [id])
  authorId     String?
  collection   Collection?  @relation(fields: [collectionId], references: [id])
  collectionId String?
  comments     Comment[]
  likedBy      LikedStyle[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  items        StyleItem[]
  tags         Tag[]        @relation("StyleTags")
}

model StyleItem {
  id        String   @id @default(cuid())
  style     Style    @relation(fields: [styleId], references: [id], onDelete: Cascade)
  styleId   String
  item      Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId    String
  createdAt DateTime @default(now())

  @@unique([styleId, itemId])
}

model Logo {
  id        String   @id @default(cuid())
  image     Image    @relation(fields: [imageId], references: [id], onDelete: Cascade)
  imageId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Brand     Brand?
}

model Item {
  id          String      @id @default(cuid())
  name        String
  description String?
  published   Boolean     @default(false)
  likedBy     LikedItem[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  style       StyleItem[]
  images      ItemImage[]
  brand       Brand       @relation(fields: [brandId], references: [id])
  brandId     String
  creator     User?       @relation(fields: [creatorId], references: [id])
  creatorId   String?
  tags        Tag[]       @relation("ItemTags")
}

model ItemImage {
  id        String   @id @default(cuid())
  image     Image    @relation(fields: [imageId], references: [id], onDelete: Cascade)
  imageId   String
  item      Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId    String
  createdAt DateTime @default(now())

  @@unique([itemId, imageId])
}

model Image {
  id        String      @id @default(cuid())
  url       String
  createdAt DateTime    @default(now())
  ItemImage ItemImage[]
  Logo      Logo[]
}

model Comment {
  id        String         @id @default(cuid())
  content   String
  author    User           @relation(fields: [authorId], references: [id])
  authorId  String
  parent    Comment?       @relation("CommentReplies", fields: [parentId], references: [id])
  parentId  String?
  replies   Comment[]      @relation("CommentReplies")
  likedBy   LikedComment[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  Style     Style          @relation(fields: [styleId], references: [id])
  styleId   String
  tag       Tag[]          @relation("CommentTags")
}

model LikedStyle {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  style     Style    @relation(fields: [styleId], references: [id], onDelete: Cascade)
  styleId   String
  createdAt DateTime @default(now())

  @@unique([userId, styleId])
}

model LikedCollection {
  id           String     @id @default(cuid())
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  collectionId String
  createdAt    DateTime   @default(now())

  @@unique([userId, collectionId])
}

model LikedComment {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  Comment   Comment? @relation(fields: [commentId], references: [id])
  commentId String?
  createdAt DateTime @default(now())

  @@unique([userId, commentId])
}

model LikedItem {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  Item      Item?    @relation(fields: [itemId], references: [id])
  itemId    String?
  createdAt DateTime @default(now())

  @@unique([userId, itemId])
}

enum status {
  ACTIVE
  INACTIVE
}
