// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String               @id @default(cuid())
  name                String?              @unique
  email               String               @unique
  password            String
  social              String?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  profile             Profile?
  resets              Reset[]
  comments            Comment[]
  authoredStyles      Style[]              @relation("UserAuthoredStyles")
  brand               Brand[]
  favoriteBrands      FavoriteBrand[]
  favoriteCollections FavoriteCollection[]
  favoriteStyles      FavoriteStyle[]
  authoredCollections Collection[]         @relation("UserAuthoredCollection")
  Item                Item[]
  CollectionVote      CollectionVote[]
  StyleVote           StyleVote[]
  ItemVote            ItemVote[]
  CommentVote         CommentVote[]
  BrandVote           BrandVote[]
  favoriteItem        favoriteItem[]
  subscriptions       UserSubscription[]   @relation("Subscribers")
  subscribers         UserSubscription[]   @relation("SubscribedTo")
  BrandSubscription   BrandSubscription[]
}

model Profile {
  id        String   @id @default(cuid())
  firstname String?
  lastname  String?
  bio       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique
}

model UserSubscription {
  id           String   @id @default(cuid())
  user         User     @relation("SubscribedTo", fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  subscriber   User     @relation("Subscribers", fields: [subscriberId], references: [id], onDelete: Cascade)
  subscriberId String
  createdAt    DateTime @default(now())

  @@unique([userId, subscriberId])
}

model Reset {
  id        String   @id @default(cuid())
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
}

model Tag {
  id          String       @id @default(cuid())
  name        String       @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  brands      Brand[]      @relation("BrandTags")
  collections Collection[] @relation("CollectionTags")
  styles      Style[]      @relation("StyleTags")
  items       Item[]       @relation("ItemTags")
  comments    Comment[]    @relation("CommentTags")
}

model Brand {
  id                String              @id @default(cuid())
  name              String              @unique
  description       String?
  logo              Logo?               @relation(fields: [logoId], references: [id])
  logoId            String?             @unique
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  items             Item[]
  owner             User?               @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId           String?
  tags              Tag[]               @relation("BrandTags")
  favoritedBy       FavoriteBrand[]
  BrandVote         BrandVote[]
  BrandSubscription BrandSubscription[]
}

model BrandSubscription {
  id        String   @id @default(cuid())
  brand     Brand    @relation(fields: [brandId], references: [id], onDelete: Cascade)
  brandId   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())

  @@unique([brandId, userId])
}

model Collection {
  id             String               @id @default(cuid())
  name           String
  description    String?
  author         User?                @relation("UserAuthoredCollection", fields: [authorId], references: [id], onDelete: Cascade)
  authorId       String?
  styles         Style[]
  favoritedBy    FavoriteCollection[]
  tags           Tag[]                @relation("CollectionTags")
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  CollectionVote CollectionVote[]
}

model Style {
  id           String          @id @default(cuid())
  name         String
  description  String
  published    Boolean         @default(false)
  author       User?           @relation("UserAuthoredStyles", fields: [authorId], references: [id], onDelete: Cascade)
  authorId     String?
  collection   Collection?     @relation(fields: [collectionId], references: [id])
  collectionId String?
  favoritedBy  FavoriteStyle[]
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  tags         Tag[]           @relation("StyleTags")
  items        Item[]          @relation("StyleItem")
  StyleVote    StyleVote[]
}

model Item {
  id           String         @id @default(cuid())
  name         String
  description  String?
  published    Boolean        @default(false)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  styles       Style[]        @relation("StyleItem")
  brand        Brand?         @relation(fields: [brandId], references: [id])
  brandId      String
  creator      User?          @relation(fields: [creatorId], references: [id])
  creatorId    String?
  tags         Tag[]          @relation("ItemTags")
  images       Image[]        @relation("ItemImage")
  ItemVote     ItemVote[]
  favoriteItem favoriteItem[]
}

model Logo {
  id        String   @id @default(cuid())
  image     Image    @relation(fields: [imageId], references: [id], onDelete: Cascade)
  imageId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Brand     Brand?
}

model Image {
  id        String   @id @default(cuid())
  url       String
  createdAt DateTime @default(now())
  item      Item[]   @relation("ItemImage")
  Logo      Logo[]
}

model Comment {
  id          String        @id @default(cuid())
  content     String
  author      User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String
  entity      Entity
  entityId    String
  parent      Comment?      @relation("CommentReplies", fields: [parentId], references: [id])
  parentId    String?
  replies     Comment[]     @relation("CommentReplies")
  tag         Tag[]         @relation("CommentTags")
  CommentVote CommentVote[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model FavoriteBrand {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  brand     Brand    @relation(fields: [brandId], references: [id], onDelete: Cascade)
  brandId   String
  createdAt DateTime @default(now())

  @@unique([userId, brandId])
}

model FavoriteCollection {
  id           String     @id @default(cuid())
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  collectionId String
  createdAt    DateTime   @default(now())

  @@unique([userId, collectionId])
}

model FavoriteStyle {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  style     Style    @relation(fields: [styleId], references: [id], onDelete: Cascade)
  styleId   String
  createdAt DateTime @default(now())

  @@unique([userId, styleId])
}

model favoriteItem {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  item      Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId    String
  createdAt DateTime @default(now())

  @@unique([userId, itemId])
}

model BrandVote {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  brand     Brand    @relation(fields: [brandId], references: [id], onDelete: Cascade)
  brandId   String
  vote      Boolean  @default(true)
  createdAt DateTime @default(now())

  @@unique([userId, brandId])
}

model CollectionVote {
  id           String     @id @default(cuid())
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  collectionId String
  vote         Int        @default(0)
  createdAt    DateTime   @default(now())

  @@unique([userId, collectionId])
}

model StyleVote {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  style     Style    @relation(fields: [styleId], references: [id], onDelete: Cascade)
  styleId   String
  vote      Int      @default(0)
  createdAt DateTime @default(now())

  @@unique([userId, styleId])
}

model ItemVote {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  item      Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId    String
  vote      Int      @default(0)
  createdAt DateTime @default(now())

  @@unique([userId, itemId])
}

model CommentVote {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String
  vote      Int      @default(0)
  createdAt DateTime @default(now())

  @@unique([userId, commentId])
}

enum Entity {
  STYLE
  ITEM
  COMMENT
  BRAND
  COLLECTION
}

enum status {
  ACTIVE
  INACTIVE
}
